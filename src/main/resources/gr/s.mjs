function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}

/* src\App.svelte generated by Svelte v3.24.1 */

const App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { ipt } = $$props;
	if ($$props.ipt === void 0 && $$bindings.ipt && ipt !== void 0) $$bindings.ipt(ipt);
	return `<b>${escape(ipt.x)}!</b>`;
});

var Foo = /** @class */ (function () {
    function Foo() {
    }
    Foo.prototype.makeMe = function (x) {
        var z = {
            x: x,
            y: x + x
        };
        var html = App.render({
            ipt: z
        }).html;
        return html;
    };
    return Foo;
}());

export { Foo };
